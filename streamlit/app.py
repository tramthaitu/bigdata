import streamlit as st
import pandas as pd
import psycopg2

conn = psycopg2.connect(
    database="postgres_db",
    user="postgres_user",
    password="postgres_password",
    host="postgres",
    port="5432"
)

# 2. Cache function ƒë·ªÉ load data
@st.cache_data
def load_data_from_sql(query: str) -> pd.DataFrame:
    # pd.read_sql t·ª± ƒë·ªông map columns, types, tr·∫£ v·ªÅ DataFrame
    return pd.read_sql(query, conn)

# 3. S·ª≠ d·ª•ng
df = load_data_from_sql("SELECT * FROM public.output_cb;")
df2 = load_data_from_sql("SELECT * FROM public.output_cf;")


# L√†m s·∫°ch categories
df['categories'] = df['categories'].fillna("").apply(
    lambda x: ', '.join(sorted(set(cat.strip() for cat in x.split(','))))
)

# ---------- KH·ªûI T·∫†O C√ÅC SESSION STATE ----------
if "selected_book_id" not in st.session_state:
    st.session_state.selected_book_id = None

if "back_to_category" not in st.session_state:
    st.session_state.back_to_category = False

if "user_name" not in st.session_state:
    st.session_state.user_name = ""
    
if "user_id" not in st.session_state:
    st.session_state.user_id = None
    
if "from_user_history" not in st.session_state:
    st.session_state.from_user_history = False
    

# ---------- GIAO DI·ªÜN CH·ªåN TH·ªÇ LO·∫†I (v·∫´n n·∫±m trong giao di·ªán ban ƒë·∫ßu) ----------
if not st.session_state.selected_book_id:
    name = st.text_input("Nh·∫≠p t√™n c·ªßa b·∫°n:", value=st.session_state.user_name, key="name_input")
    if name:
        st.session_state.user_name = name
        matched_users = df2[df2['profileName'].astype(str) == name]
        if not matched_users.empty:
            st.session_state.user_id = matched_users['User_id'].values[0]
            st.session_state.from_user_history = True
        else:
            st.write("H√£y b·∫Øt ƒë·∫ßu kh√°m ph√° c√°c th·ªÉ lo·∫°i b·∫°n y√™u th√≠ch")
            st.session_state.from_user_history = False
    # L·∫•y t·∫•t c·∫£ th·ªÉ lo·∫°i
    all_categories = sorted({
        cat.strip()
        for cats in df['categories']
        for cat in cats.split(',')
        if cat.strip()
    })

    selected_cats = st.multiselect(
        "üìö KH√ÅM PH√Å:",
        options=all_categories,        
        help="L·ªçc c√°c s√°ch theo th·ªÉ lo·∫°i ƒë√£ ch·ªçn"
    )

    if selected_cats:
        def match_categories(row_categories, selected):
            row_cats = [cat.strip() for cat in str(row_categories).split(',')]
            return any(cat in row_cats for cat in selected)

        filtered_df = df[df['categories'].apply(lambda x: match_categories(x, selected_cats))]

        st.markdown(f"### üéØ K·∫øt qu·∫£ ({len(filtered_df)} s√°ch)")

        shown_books = set()
        for _, row in filtered_df.iterrows():
            book_id = row['book_id']
            if book_id in shown_books:
                continue
            shown_books.add(book_id)

            with st.container():
                col1, col2 = st.columns([1, 4])
                with col1:
                    st.image(row['image'], width=120)
                with col2:
                    st.markdown(f"**{row['Title']}**")
                    st.markdown(f"T√°c gi·∫£: {row['authors']}")
                    st.markdown(f"Th·ªÉ lo·∫°i: {row['categories']}")
                    st.markdown(f"Nh√† xu·∫•t b·∫£n: {row['publisher']}")
                    if st.button(f"üìñ Ch·ªçn s√°ch n√†y", key=f"book_{row['book_id']}"):
                        st.session_state.selected_book_id = row['book_id']
                        st.rerun()
        st.markdown("---")
    else:
        st.warning("Ch·ªçn √≠t nh·∫•t 1 th·ªÉ lo·∫°i.")
else:
    # ---------- GIAO DI·ªÜN HI·ªÜN S√ÅCH ƒê√É CH·ªåN ----------
    selected_book = df[df['book_id'].astype(str) == str(st.session_state.selected_book_id)]
    
    if selected_book.empty:
        st.error("Kh√¥ng t√¨m th·∫•y s√°ch ƒë√£ ch·ªçn.")
    else:
        selected_book = selected_book.iloc[0]
        col1, col2 = st.columns([1, 4])
        with col1:
            st.image(selected_book['image'], width=120)
        with col2:
            st.markdown(f"**{selected_book['Title']}**")
            st.markdown(f"T√°c gi·∫£: {selected_book['authors']}")
            st.markdown(f"Th·ªÉ lo·∫°i: {selected_book['categories']}")
            st.markdown(f"Nh√† xu·∫•t b·∫£n: {selected_book['publisher']}")
            st.write(f"M√¥ t·∫£: {selected_book['description']}")
        st.markdown("---")
        # ---------- G·ª¢I √ù D·ª∞A V√ÄO QUERY_ID ----------
        st.markdown("## üìö G·ª£i √Ω s√°ch li√™n quan:")
        related_books = df[
        (df['query_id'] == selected_book['book_id']) & #ƒëang l·ªói do ch∆∞a ƒë·ªïi df khi th·ª±c hi·ªán ch·ªçn s√°ch ·ªü hai ph·∫ßn logic s·ª≠ d·ª•ng hai df kh√°c nhau -> ph·∫£i t·∫°o th√™m code t∆∞∆°ng t·ª± ƒë·ªÉ v√†o t·ª´ng ph·∫ßn khi ch·ªçn s√°ch t·ª´ user m·ªõi v√† c≈©
        (df['book_id'] != selected_book['book_id'])  #  lo·∫°i ch√≠nh n√≥
        ]
        if related_books.empty:
            st.warning("Kh√¥ng c√≥ g·ª£i √Ω n√†o cho s√°ch n√†y")
        else:
            shown_books = set()
            for _, row in related_books.iterrows():
                book_id = row['book_id']
                if book_id in shown_books:
                    continue
                shown_books.add(book_id)

                with st.container():
                    col1, col2 = st.columns([1, 4])
                    with col1:
                        default_image = "https://d28hgpri8am2if.cloudfront.net/book_images/onix/cvr9781787550360/classic-book-cover-foiled-journal-9781787550360_xlg.jpg"
                        image_url = row['image'] if isinstance(row['image'], str) and row['image'].startswith("http") else default_image
                        st.image(image_url, width=120)
                    with col2:
                        st.markdown(f"**{row['Title']}**")
                        st.markdown(f"T√°c gi·∫£: {row['authors']}")
                        st.markdown(f"Th·ªÉ lo·∫°i: {row['categories']}")
                        st.markdown(f"Nh√† xu·∫•t b·∫£n: {row['publisher']}")
                        if st.button("üìñ Ch·ªçn s√°ch n√†y", key=f"book_{row['book_id']}"):
                            st.session_state.selected_book_id = row['book_id']
                            st.rerun()
            st.divider()
            if st.session_state.selected_book_id:
                if st.button("üîô Quay l·∫°i ch·ªçn th·ªÉ lo·∫°i"):
                    st.session_state["selected_book_id"] = None
                    st.session_state.back_to_category = True
                    st.rerun()
#------------GIAO DI·ªÜN CHO NG∆Ø·ªúI D√ôNG C≈®--------------
if st.session_state.from_user_history:
    st.info("Nh·ªØng quy·ªÉn s√°ch b·∫°n c√≥ th·ªÉ th√≠ch:")
    user_books = df2[df2['User_id'] == st.session_state.user_id]
    shown = set()
    for _, row in user_books.iterrows():
        if row["book_id"] in shown:
            continue
        shown.add(row["book_id"])
        
        with st.container():
            col1, col2 = st.columns([1, 4])
            with col1:
                default_image = "https://d28hgpri8am2if.cloudfront.net/book_images/onix/cvr9781787550360/classic-book-cover-foiled-journal-9781787550360_xlg.jpg"
                image_url = row['image'] if isinstance(row['image'], str) and row['image'].startswith("http") else default_image
                st.image(image_url, width=120)
            with col2:
                st.markdown(f"**{row['Title']}**")
                st.markdown(f"T√°c gi·∫£: {row['authors']}")
                st.markdown(f"Th·ªÉ lo·∫°i: {row['categories']}")
                st.markdown(f"Nh√† xu·∫•t b·∫£n: {row['publisher']}")
                if st.button("üìñ Ch·ªçn s√°ch n√†y", key=f"user_select_{row['book_id']}"):
                    st.session_state.selected_book_id = row['book_id']
                    st.rerun()
st.divider()
if st.session_state.selected_book_id:
    if st.button("üîô Quay l·∫°i ch·ªçn th·ªÉ lo·∫°i", key="callback"):
        st.session_state["selected_book_id"] = None
        st.session_state.back_to_category = True
        st.rerun()