services:
  postgres:
    image: postgres:11
    container_name: postgres
    environment:
      POSTGRES_USER: 'postgres_user'
      POSTGRES_PASSWORD: 'postgres_password'
      POSTGRES_DB: 'postgres_db'
    networks:
      - docker_example_network
    expose:
      - '5432'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres_user -d postgres_db']
      interval: 10s
      timeout: 8s
      retries: 5
  user-code:
    build:
      context: ./dagster-pipeline
      dockerfile: Dockerfile
    container_name: user-code
    image: user-code_image
    restart: always
    environment:
      DAGSTER_HOME: '/opt/dagster/dagster_home'
      DAGSTER_POSTGRES_USER: 'postgres_user'
      DAGSTER_POSTGRES_PASSWORD: 'postgres_password'
      DAGSTER_POSTGRES_DB: 'postgres_db'
      DAGSTER_POSTGRES_HOST: 'postgres'
      DAGSTER_POSTGRES_PORT: '5432'
    volumes:
      - ./dagster-instance/dagster_home:/opt/dagster/dagster_home:ro
    expose:
      - '4000'
    healthcheck:
      test: ["CMD", "bash", "-c", "timeout 1 bash -c '</dev/tcp/localhost/4000'"]
      interval: 5s
      timeout: 3s
      retries: 10
    networks:
      - docker_example_network
  dagster-webserver:
    build:
      context: ./dagster-instance
      dockerfile: Dockerfile
    entrypoint:
      - dagster-webserver
      - -h
      - '0.0.0.0'
      - -p
      - '3000'
      - -w
      - /opt/dagster/dagster_home/workspace.yaml
    container_name: dagster-webserver
    expose:
      - '3000'
    ports:
      - '3000:3000'
    environment:
      DAGSTER_POSTGRES_USER: 'postgres_user'
      DAGSTER_POSTGRES_PASSWORD: 'postgres_password'
      DAGSTER_POSTGRES_DB: 'postgres_db'
      DAGSTER_HOME: '/opt/dagster/dagster_home'
      DAGSTER_POSTGRES_HOST: 'postgres'
      DAGSTER_POSTGRES_PORT: '5432'
    volumes: # Make docker client accessible so we can terminate containers from the webserver
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - docker_example_network
    depends_on:
      postgres:
        condition: service_healthy
      user-code:
        condition: service_healthy
  dagster-daemon:
    build:
      context: dagster-instance
      dockerfile: Dockerfile
    entrypoint:
      - dagster-daemon
      - run
      - -w
      - /opt/dagster/dagster_home/workspace.yaml
    container_name: dagster-daemon
    restart: on-failure
    environment:
      DAGSTER_POSTGRES_USER: 'postgres_user'
      DAGSTER_POSTGRES_PASSWORD: 'postgres_password'
      DAGSTER_POSTGRES_DB: 'postgres_db'
      DAGSTER_HOME: '/opt/dagster/dagster_home'
      DAGSTER_POSTGRES_HOST: 'postgres'
      DAGSTER_POSTGRES_PORT: '5432'
    volumes: # Make docker client accessible so we can launch containers using host docker
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - docker_example_network
    depends_on:
      postgres:
        condition: service_healthy
      user-code:
        condition: service_healthy

networks:
  docker_example_network:
    driver: bridge
    name: docker_example_network